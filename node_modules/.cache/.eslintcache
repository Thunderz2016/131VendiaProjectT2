[{"C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\index.js":"1","C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\App.js":"2","C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\reportWebVitals.js":"3","C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\vendiaClient.js":"4","C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\Demo.js":"5"},{"size":552,"mtime":1695590072248,"results":"6","hashOfConfig":"7"},{"size":227,"mtime":1695590072243,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1695588435656,"results":"9","hashOfConfig":"7"},{"size":324,"mtime":1695588435657,"results":"10","hashOfConfig":"7"},{"size":7546,"mtime":1695590072245,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qgmz24",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\index.js",[],[],"C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\App.js",[],[],"C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\vendiaClient.js",[],[],"C:\\Users\\Ronald Pierre Lingat\\131VendiaProjectT2\\src\\Demo.js",["29","30"],[],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { vendiaClient } from \"./vendiaClient\";\r\n\r\nconst { client } = vendiaClient();\r\n\r\nexport const Demo = () => {\r\n    \r\n    const [device, setDevice] = useState();\r\n    const [testID, setTestID] = useState(); // Initialize as 0 or any default integer value\r\n    const [orgAssignment, setOrgAssignment] = useState();\r\n    const [testName, setTestName] = useState() ;\r\n    const [testMethod, setTestMethod] = useState();\r\n    const [notes, setNotes] = useState();\r\n    const [completed, setCompleted] = useState(); // Initialize as True or any default boolean value\r\n    const [testList, setTestList] = useState() ;\r\n    const [updatedBy, setUpdatedBy] = useState(); // Initialize with an empty string\r\n\r\n    const container = document.getElementById(\"dropdown-container\");\r\n    // Create a select element (dropdown)\r\n    const dropdown = document.createElement(\"select\");\r\n    // Create and append option elements to the dropdown\r\n    const option1 = document.createElement(\"option\");\r\n    option1.text = \"Option 1\";\r\n    const option2 = document.createElement(\"option\");\r\n    option2.text = \"Option 2\";\r\n    const option3 = document.createElement(\"option\");\r\n    option3.text = \"Option 3\";\r\n    const option4 = document.createElement(\"option\");\r\n    option3.text = \"Option 4\";\r\n    \r\n    dropdown.add(option1);\r\n    dropdown.add(option2);\r\n    dropdown.add(option3);\r\n    dropdown.add(option4);\r\n\r\n    //container.appendChild(dropdown);\r\n\r\n    useEffect(() => {\r\n        // List all the Test\r\n         const listTest = async () => {\r\n            const listTestResponse = await client.entities.test.list();\r\n            console.log(listTestResponse?.items);\r\n            setTestList(listTestResponse?.items);\r\n        }\r\n\r\n    //listTest();\r\n    }, [])\r\n\r\n    const addDevice = async () => {\r\n        // Add a new product\r\n        const addDeviceResponse = await client.entities.test.add ({\r\n            Device: device,\r\n            TestID: parseInt(testID),\r\n            OrgAssignment:orgAssignment,\r\n            TestName: testName,\r\n            TestMethod:testMethod,\r\n            Notes:notes,\r\n            Completed: Boolean(completed),\r\n            UpdatedBy: updatedBy,\r\n        })\r\n        console.log(addDeviceResponse);\r\n    }\r\n\r\n    const handleDeviceChange = (event) => {\r\n        setDevice(event.target.value);\r\n        //console.log(device);\r\n    }\r\n\r\n    const handleTestIDChange = (event) => {\r\n        setTestID(event.target.value);\r\n        //console.log(device);\r\n    }\r\n\r\n    const handleOrgAssignmentChange = (event) => {\r\n        setOrgAssignment(event.target.value);\r\n        //console.log(device);\r\n    }\r\n\r\n    const handleTestNameChange = (event) => {\r\n        setTestName(event.target.value);\r\n        //console.log(testName);\r\n    }\r\n\r\n    const handleTestMethodChange = (event) => {\r\n        setTestMethod(event.target.value);\r\n        //console.log(device);\r\n    }\r\n\r\n    const handleNotesChange = (event) => {\r\n        setNotes(event.target.value);\r\n        //console.log(device);\r\n    }\r\n\r\n    const handleCompletedChange = (event) => {\r\n        setCompleted(event.target.value);\r\n        //console.log(device);\r\n    }\r\n\r\n    const handleUpdatedByChange = (event) => {\r\n        setUpdatedBy(event.target.value);\r\n        //console.log(device);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        addDevice();\r\n    }\r\n\r\n    //console.log(testList)\r\n\r\n    return (\r\n        <div>\r\n            Team Zephyr Device Test Tracker\r\n            <div>\r\n                <label>Device 1</label>\r\n                <div id=\"dropdown-container\"></div>\r\n\r\n            <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column' }}>\r\n {/*// start horizonal change here*/}\r\n                {/*Device Output on website(string)??*/}\r\n                <div class=\"hstack gab-2\">    \r\n                <label class=\"p-2\">Device:\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"Device\"\r\n                    value={device}\r\n                    onChange={handleDeviceChange}\r\n                    />\r\n                    </label>\r\n                </div>\r\n\r\n                {/* //test id user name place-integer-*/}\r\n                <div class=\"hstack gab-3\">\r\n                <label class=\"p-2\">TestID:\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"TestID\"\r\n                        value={testID}\r\n                        onChange={handleTestIDChange}\r\n                        />\r\n                        </label>\r\n                </div>\r\n\r\n                {/* //OrgAssignment inputplace for website-string- oh SWAP here w input textnme*/}\r\n                <div class=\"hstack gab-3\">\r\n                <label>OrgAssignment: </label>\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"OrgAssignment\"\r\n                        value={orgAssignment}\r\n                        onChange={handleOrgAssignmentChange}\r\n                        />\r\n                </div>\r\n\r\n                {/*testName(strring) place to input*/}\r\n                <div class=\"hstack gab-3\">\r\n                <label>TestName: </label>\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"TestName\"\r\n                        value={testName}\r\n                        onChange={handleTestNameChange}\r\n                        />\r\n                </div>\r\n                \r\n                {/* //testMethod place -string-*/}\r\n                <div class=\"hstack gab-3\">\r\n                <label>TestMethod: </label>\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"TestMethod\"\r\n                        value={testMethod}\r\n                        onChange={handleTestMethodChange}\r\n                        />\r\n                </div>\r\n\r\n                {/* //Notes input/Output -string-*/}\r\n                <div class=\"hstack gab-3\">\r\n                <label>Notes: </label>\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"Notes\"\r\n                        value={notes}\r\n                        onChange={handleNotesChange}\r\n                        />\r\n                </div>\r\n\r\n                {/* // completed-this is the boolean- input/Output */}\r\n                <div class=\"hstack gab-3\">\r\n                <label>Completed: </label>\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"Completed\"\r\n                        value={completed}\r\n                        onChange={handleCompletedChange}\r\n                        />\r\n                </div>\r\n\r\n                {/* Add updated by column */}\r\n                <div class=\"hstack gab-3\">\r\n                <label>UpdatedBy: </label>\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"UpdatedBy\"\r\n                        value={updatedBy}\r\n                        onChange={handleUpdatedByChange}\r\n                        />\r\n                </div>\r\n\r\n                <input type=\"Submit\" />\r\n                </form>\r\n            <div>\r\n                {testList?.map((item, index) => (\r\n                    <div key={index}>\r\n                        {item?.TestID}\r\n                    </div>\r\n                ))\r\n                }\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};",{"ruleId":"31","severity":1,"message":"32","line":19,"column":11,"nodeType":"33","messageId":"34","endLine":19,"endColumn":20},{"ruleId":"31","severity":1,"message":"35","line":41,"column":16,"nodeType":"33","messageId":"34","endLine":41,"endColumn":24},"no-unused-vars","'container' is assigned a value but never used.","Identifier","unusedVar","'listTest' is assigned a value but never used."]